{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":16076666429241719353,"abi":{"parameters":[{"name":"user_key","type":{"kind":"field"},"visibility":"private"},{"name":"token_address","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"current_amount","type":{"kind":"field"},"visibility":"private"},{"name":"previous_nonce","type":{"kind":"field"},"visibility":"private"},{"name":"previous_personal_imt_root","type":{"kind":"field"},"visibility":"private"},{"name":"imt_leaf_proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"},{"name":"receiver_public_key","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"master_tree_root","type":{"kind":"field"},"visibility":"public"},{"name":"personal_imt_root_proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"},{"name":"personal_imt_root_leaf_value","type":{"kind":"field"},"visibility":"private"},{"name":"personal_imt_root_leaf_key","type":{"kind":"field"},"visibility":"private"},{"name":"personal_imt_root_leaf_idx","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"array","length":2,"type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"7054198250396484562":{"error_kind":"string","string":"Personal IMT root proof verification failed"},"12015829347525818808":{"error_kind":"string","string":"Current balance proof should be valid"},"12169368178153805254":{"error_kind":"string","string":"Personal IMT root leaf value doesn't match provided personal_imt_root"}}},"bytecode":"","debug_symbols":"7P3fjmTZlx6JvUtf8yLcffs/voogCJScIxAYkIJIXRHz7ormsKobTDc/+1f15WT2t+yuu5HRmcc8KvKstS23/fd/ev3H/+f/7//9//hP//l/+y//9Z/+/f/tv//T//5f/l//4b/9p//yn7//t//+T1//4//0X/8//+E///P/9l//23/4//63f/r3l8vj/O/+6T/+59f3/7hO1//j3/3T//af/vf/+E///nb6P/7v/+6fTv/4l5z/8S+5/ONfsv7xL7n+419y+8e/5P6Pf8njH/+S59svuX3d//iS2+2Hj/L9x/9cpz++5nlf/+vXnP7C15z/wtdc/sLXrL/wNde/8DW3v/A197/wNY+/8DVvvw/W+Xz9n1+zzrfzv/6af/fDL76ezpf/+Yuvp/Uvv8H9/OYXP+/P//lrT6fz6fOvvVz/+P5dp9ufv/Tx7peez48//v+eL1/nz7/4dPn68w9xOT8OfvHX+Y8/xenrX/0n8f2L//lH1Zf4/g6+k/j+Dr5zB7776fYHvvvl64DI/f7HH/h0f57/Fr6L+P4OvvX38Z3PX3/gO5/v/xrJP/8G15/9G9x+9m9w/9m/wSP7G1zO/+tv8PzJv8Hl62f/BoG/Y863P/8r//7p/fm/3NPp8fjjP5pzwX/ml7P8/ha/wN8yl+sfY9l1fV2G8Vu/Db9//tME/k5al9Off5rL43/9DW4/+ze4/+zf4PGzf4PnT/5bdX397N/g9LN/g/PP/g0uP/mv7bV+9m9w/dm/wc2/OP/OD/51l9/f4vfwxeNv8XvK7+/wu3795PeA6+ln/wbnn/0bXH72b7B+8nvA9WfvaK4/e0dz/dk7muvP3tFcf/aO5vazdzQ3dzR/60ftzR3N3+Pnjubv8Vvy+1v8fvZW6fazt0q3n71Vuv3srdLtZ2+V7j97q3T/2Vul+8/eKt1/9lbpvn72b/Czt0p3t0p/60ft3a3S3+PnVunv8XOr9Lf4PX72Vunxs7dKj5+9VXr87K3SY/3k94DHz94qPX72Vunxs7dKj5+9VXr87K3S82dvlZ5ulf7Wj9qnW6W/x8+t0t/jt+T3t/jB36L3P/ldvv7Xfw/yfP8X4/XyB5l1vT7/16+5/4WvefyFr3n+419z+vr6K190+itfdP4rX3T5K1+0/soXvf9uuN7+/G643h8/fNHtr3zR/a980eOvfNHzL3zR6euvfNHpr3zR+a980eWvfBF9R9z/5Yt++I44Xf/KF93+yhfd/8oXvf+OuN3//MF7/1dvxW9//P8b+CF9gn+Bd/+Xx3ys87/9x4R/KVf3mG9/Tly/1h//9Of69bj9r9/p7/8d19EXvf05cT0//xzcL6fTD1+0/soXXf/KF93+yhfd/8oXPf7KFz3/whe9/7cqR190+itf9P474vb4c9y9fx387Jv8DyNP7//Rxb89fr/qx9j7f3Qhv21+17/Pb/Loenr/z2D+MYCTd0+n9//MR4D7AB8C/HsAnwL8WwDf/zO0DwD/xxe9fd28XU7rf37RbZ0en6k/Luc//uZ5XO6PA5Bff65jL1/X+8FHdP364xefrufrrHfS9/8mz0/mN/hkLn4ynz+Zf/mZc749L/8XfjLLT+Y3/cvp6ifzm34yt9/5k3lc/vhjnB7Po19c90Z3/40/mvPXn/dFnr//85720Tz8aH7Xj+b5O380l/O/vLT+qwed8dG8/zfefjS/w0fzOy8Cztf7n1Rul2mLnevvvAkY/tH8zquA8/35B+3zY437aJYfze/60bxfBtxOfzzm7fa4fP5o/k085vvJ+n778zEfl+fBd+D99Mfv8Lifr59/8br+uXZbt69/9X1yevtN9X0c8Oci4/o4f/7l58efQuH58fiX/9/f/wn9j0e9z3nUx5xHfY551Pd31nQ+6mnOo57nPOplzqOuOY96nfOoc96WbnPelm5z3pZuc96W7nPelu5z3pbuc96W7nPelu5z3pbuc96W7nPelu5z3pbuc96W7nPelh5z3pYec96WHnPelh5z3pYec96WHnPelh5z3pYec96WHnPelh5z3paec96WnnPelp5z3paec96WnnPelp5z3paec96WnnPelp5z3paeY96Wzl9j3pbOX2Pels5fY96Wzl9j3pbOX2vOo455Wzp/jXlbOn+NeVs6f415Wzp/zXlbOs15WzrNeVs6zXlbOs15WzrNeVs6zXlbOs15WzrNeVs6zXlbOs15WzrPeVs6z3lbOs95WzrPeVs6z3lbOs95WzrPeVs6z3lbOs95WzrPeVu6zHlbusx5W7rMeVu6zHlbusx5W7rMeVu6zHlbusx5W7rMeVu6zHlbWnPeltact6U1521pzXlbWnPeltact6U1521pzXlbWnPeltact6XrnLel65y3peuct6XrnLel65y3peuct6U5d3mf59zlfZ5zl/d5zl3e5zl3eZ/n3OV9nnOX93nOXd7nOXd5n+fc5X2ec5f3ec5d3uc5d3mf59zlfZ5zl/d5zl3e5zl3eZ/n3OV9nnOX93nOXd7nOXd5n+fc5X2ec5f3ec5d3uc5d3mf59zlfZ5zl/d5zl3e5zl3eZ/n3OV9nnOX93nOXd7nOXd5n+fc5X2ec5f3ec5d3uc5d3mf59zlfZ5zl/d5zl3e5zl3eZ/n3OV9nnOX93nOXd6XOXd5X+bc5X2Zc5f3Zc5d3pevNedRx7wtXebc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX92XOXd6XOXd5X+bc5X2Zc5f3Zc5d3pc5d3lf5tzlfZlzl/dlzl3elzl3eV/m3OV9mXOX95pzl/eac5f3mnOX95pzl/f6WnMedczb0ppzl/eac5f3mnOX95pzl/eac5f3mnOX92q6y/tyvv/xB7mcH88fHrXobenoUVfTo37d/nzU84/fwEVvS0ePWvS2dPSoRW9LR/+tFr0tHX2qRW9LB59q013eB59q013eR59q1dvS5091zttS013eR59q1dvS50+19W3pcv/hUavelj4/atXb0udv4DlvS013eR98Azfd5X30qK1vS28etept6fOjrjk/lua8LTXd5X3wDtx0l/fRo87ZLTXd5X3w32rTXd4Hn2rTXd5Hn+qct6Wmu7yPHnXN+Qae87bUdJf30U/gOW9LTXd5Hz3qnLelpru8Dz7Vpru8jz7VOSdxTXd5H32q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em+ac9H397MO2jfNuer7+1kH7ZvmXPb9/ayD9k1zrvv+ftZB7021F36/+1zH/Mu572cd9N7Udef352ftuvT78/dw163fB8866L2p697vg2ddg5510HtT7dXf7/7OGbRv6rr8++B7eNA53Zzrv7+fddA5XdcF4AfPOuicrusK8IOfTYPem2ovAX/3PTzovan2GvB3zzpo39R1Efjnn01dN4EfPOugfVPXXeAHz7oGPeug96Y514F/P+ugc7o5F4J/P+ugfdOcK8G/n3XQe1PtpeBv3v27bgU/eNY16Ht40HtT18XgBz+Hx9ze9P2sg96buu4G//zfa+3l4G8+167bwQ8+10HvTV33gx886xr0PTzovan2ivB3P4cHvTd1XRJ+8KyD3ptqrwl/87l23RN+8LkOOqfruin84HNdc94Ru+4KP3jWMSG672cddE4357rw72dt9Zt+fNbToPvCT4PuCz8Nui/8NOi+8NPXGvQ9PGffdKq9L/zdz+E5+6ZT7X3h7551zr7p1HVf+OfPddB94adB94Wfuu4LP/hc16DPddB706D7wk+D7gs/Dbov/DTovvDToPvCT4PuCz8Nui/8NOi+8NOg+8JPg+4LPw26L/w06L7w06D7wk+D7gs/Dbov/DTovvBT7X3h776HB7031d4X/u5Z5/hNp677wg9+Ns3xm06D7gs/Dbov/NR1X/jBsw7aN3XdF/75Z1PXfeEHz7rmnNN13Rd+8KyD/Kau+8IP/nsd5DcNui/8VHtf+JvPteu+8IPPdZDf1HVf+MHnuua8+3fdF37wrIP2TV33hR8866B906D7wk9d94UfPOugfVPXfeGffzZ13Rd+8Kxr0PfwoPem2vvC3z3rIL+p677wg59Ng/ZNtfeFv/ke7rov/OBZB/lNg+4LPw26L/w06L7wU+194e++hwe9N9XeF/7uWQftm7ruC//8s2nQfeGn2vvC35zT1d4X/u5Z16BnHfTeVHtf+Lu/cwa9N3XdF37wPTxo3zTovvBT133hB8866L1p0H3hp0H3hZ8G3Rd+GnRf+GnQfeGn2vvC330Pz9k3nWvvC3/3rHPO6c5d94V//Nl07rov/OBZ15j34XPXfeEHzzrn39Odu+4LP/jvdc6/pzsPui/8XHtf+Jt3ia77wg+eddB706D7ws+D7gs/d90XfvCsg96buu4LP/jvddB706D7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","file_map":{"16":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use dep::std;\nuse std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\nuse dep::poseidon::poseidon2::Poseidon2;\nuse dep::poseidon_ctr_encryption::{poseidon_ctr_encrypt};\nuse dep::ec::tecurve::affine::{Point};\nuse dep::ec::consts::te::{baby_jubjub};\nuse dep::indexed_merkle_tree::{\n    Leaf,\n    Proof,\n    insert_item,\n    verify_proof\n};\nmod test;\n\n// === EXTENDED PEDERSEN COMMITMENT WITH DOMAIN SEPARATION ===\n// Uses m*G + r*H + domain for token-specific domain separation\n\nfn pedersen_commitment_token(m: Field, r: Field, token_address: Field) -> EmbeddedCurvePoint {\n    // Get generators using derive_generators\n    let generators: [EmbeddedCurvePoint; 3] = std::hash::derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), 0);\n    let G = generators[0];  // First generator\n    let H = generators[1];  // Second generator\n    let D = generators[2];  // Third generator\n    // Create scalars for multi_scalar_mul\n    let mut scalars = [EmbeddedCurveScalar { lo: 0, hi: 0 }; 3];\n    scalars[0] = from_field(m);\n    scalars[1] = from_field(r);\n    scalars[2] = from_field(token_address);\n    \n    // Create points for multi_scalar_mul: [G, H, G]\n    let mut points = [EmbeddedCurvePoint::point_at_infinity(); 3];\n    points[0] = G;\n    points[1] = H;\n    points[2] = D;  \n    \n    // Compute commitment: m*G + r*H + token_address*D\n    multi_scalar_mul(points, scalars)\n}\n\n\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\n// Removed unused function\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n\nfn from_field(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) =   compute_decomposition(scalar) ;\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n\nfn main(\n    user_key: Field,\n    token_address: Field,\n    amount: Field,\n    current_amount: Field,\n    previous_nonce: Field, \n    previous_personal_imt_root: Field,\n    imt_leaf_proof: [Field; 32], \n    receiver_public_key: [Field; 2],\n    \n    \n    master_tree_root: pub Field,                    // Master tree root from contract\n    personal_imt_root_proof: [Field; 32],      // Proof that personal_imt_root is a leaf in master tree\n    personal_imt_root_leaf_value:  Field,       // The actual value of personal_imt_root leaf\n    personal_imt_root_leaf_key:  Field,          // The key for the personal_imt_root leaf in master tree\n    personal_imt_root_leaf_idx:  Field,          // The index of the personal_imt_root leaf in master tree\n) -> pub (Field, Field, [Field; 2], [Field; 2], [Field; 2]) {\n    // === TWO-LEVEL TREE VERIFICATION ===\n    // 1. Verify that personal_imt_root is a valid leaf in the master tree\n    // 2. Verify the user's balance in their personal IMT\n    // 3. Perform the send operation\n    \n    // NEW: Verify that personal_imt_root is a valid leaf in the master tree\n    // 1. Create the personal_imt_root leaf for verification\n    let personal_imt_root_leaf = Leaf {\n        key: personal_imt_root_leaf_key as u64,\n        next_idx: 0,\n        next_key: 0,\n        value: personal_imt_root_leaf_value\n    };\n    \n    // 2. Verify that personal_imt_root_leaf_value matches the personal_imt_root\n    assert(personal_imt_root_leaf_value == previous_personal_imt_root, \"Personal IMT root leaf value doesn't match provided personal_imt_root\");\n    \n    // 3. Verify the personal_imt_root proof against the master tree root\n    // Use the provided leaf index from the proof generation\n    let personal_imt_root_proof = Proof {\n        leaf_idx: personal_imt_root_leaf_idx as u32, // Use the provided leaf index\n        leaf: personal_imt_root_leaf,\n        root: master_tree_root,\n        siblings: personal_imt_root_proof\n    };\n    \n    // 4. Verify the personal_imt_root proof is valid\n    let personal_imt_root_proof_valid = verify_proof(personal_imt_root_proof);\n    assert(personal_imt_root_proof_valid, \"Personal IMT root proof verification failed\");\n    \n    // 5. The master_tree_root is now verified to be a valid root from the contract\n    // This proves that personal_imt_root was a valid leaf in the master tree\n    \n    assert((current_amount as u64) >= (amount as u64));\n    let nonce = previous_nonce + 1 as Field;\n    let previous_nonce_commitment = \n        Poseidon2::hash([user_key, previous_nonce as Field], 2);\n  \n    let new_nonce_commitment = \n        Poseidon2::hash([user_key, previous_nonce_commitment + 1 as Field], 2);\n    \n    // === PERSONAL IMT VERIFICATION ===\n    // Now verify the user's balance in their personal IMT (second level verification)\n    \n    // Calculate new balance after spending\n    let new_balance = (current_amount as u64 - amount as u64) as Field;\n    \n    // Create a proof from the provided siblings to verify the current balance\n    // The proof contains the actual leaf structure from the tree\n    let current_leaf = Leaf {\n        key: token_address as u64,\n        next_idx: 0, \n        next_key: 0, \n        value: current_amount\n    };\n    \n    let current_proof = Proof {\n        leaf_idx: 1, // The leaf is at index 1 (after the zero item)\n        leaf: current_leaf,\n        root: previous_personal_imt_root,\n        siblings: imt_leaf_proof\n    };\n    \n    // Verify that the current balance proof is valid\n    assert(verify_proof(current_proof), \"Current balance proof should be valid\");\n    \n    // Update the leaf with the new balance\n    let updated_leaf = Leaf {\n        key: token_address as u64,\n        next_idx: 0,\n        next_key: 0,\n        value: new_balance\n    };\n    \n    // Removed unused variable\n    \n    // For now, we'll compute the new root by creating a simple tree with the updated balance\n    // In a real implementation, you would update the existing tree structure\n    let mut leaves: [Leaf; 32] = [Leaf { key: 0, next_idx: 0, next_key: 0, value: 0 }; 32];\n    let mut num_leaves = 1;\n    \n    let (insertion_result, _, _) = insert_item(\n        leaves,\n        num_leaves,\n        token_address as u64,\n        new_balance\n    );\n    \n    // Create new personal indexed merkle tree root hash\n    let new_personal_imt_root = insertion_result.root_after;\n    \n    // Create new main tree commitment\n    let new_main_tree_commit = Poseidon2::hash([new_personal_imt_root, new_nonce_commitment], 2);\n\n    // Perform Diffie-Hellman key exchange\n    let (sender_pub_key, shared_key) = perform_dh_key_exchange(user_key + nonce as Field, receiver_public_key);\n\n\n    // === POSEIDON CTR MODE ENCRYPTION ===\n    // Encrypt each field separately using Poseidon in CTR mode\n    \n    // Create shared key hash for encryption\n    let shared_key_hash = Poseidon2::hash([shared_key], 1);\n    \n    // Encrypt only amount and token_address (2 fields)\n    let encrypted_amount = poseidon_ctr_encrypt(amount, shared_key_hash, 0);\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, shared_key_hash, 1);\n    let encrypted_note = [encrypted_amount, encrypted_token_address];\n    \n    // For encrypted_event, use view key approach (like in nydus-entry) to encrypt only 2 fields\n    let user_key_hash = Poseidon2::hash([user_key], 1);\n    let view_string = 0x76696577696e675f6b6579 as Field;\n    let view_key = Poseidon2::hash([view_string, user_key_hash], 2);\n    \n    // Encrypt only amount and token_address using view key\n    let encrypted_amount = poseidon_ctr_encrypt(amount, view_key, 0);\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, view_key, 1);\n    \n    // === PEDERSEN COMMITMENT FOR RECEIPT ===\n    // Create token-specific Pedersen commitment: C = m*G_token + r*H_token\n    // Where m = amount, r = shared_key_hash (blinding factor)\n    let receipt_commitment = pedersen_commitment_token(amount, shared_key_hash, token_address);\n\n    (   \n        new_nonce_commitment,\n        new_main_tree_commit,\n        encrypted_note,\n        [receipt_commitment.x, receipt_commitment.y],        \n        sender_pub_key\n    )\n}\n\n\n\nfn perform_dh_key_exchange(sender_private_key: Field, receiver_public_key: [Field; 2]) -> ([Field; 2], Field) {\n    // === DIFFIE-HELLMAN KEY EXCHANGE ===\n    // Create Baby Jubjub curve for DH\n    let bjj = baby_jubjub();\n    let generator = bjj.base8;\n    \n    // Generate sender's public key: sender_pub_key = sender_private_key * generator\n    let sender_public_key = bjj.curve.mul(sender_private_key, generator);\n    \n    // Reconstruct receiver's public key from the input\n    let receiver_pub_key = Point::new(receiver_public_key[0], receiver_public_key[1]);\n    \n    // Compute shared secret: shared_secret = sender_private_key * receiver_public_key\n    let shared_secret = bjj.curve.mul(sender_private_key, receiver_pub_key);\n    \n    // Hash the shared secret to get a final shared key\n    let shared_key = Poseidon2::hash([shared_secret.x, shared_secret.y], 2);\n    ([sender_public_key.x, sender_public_key.y], shared_key)\n\n}\n","path":"/home/drone/projects/ethrome25/circuits/main/nydus-send/src/main.nr"},"71":{"source":"pub mod affine {\n    // Affine coordinate representation of Twisted Edwards curves\n    // Points are represented by two-dimensional Cartesian coordinates.\n    // Group operations are implemented in terms of those in CurveGroup (in this case, extended Twisted Edwards) coordinates\n    // for reasons of efficiency.\n    // See <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::affine::{Curve as MCurve, Point as MPoint},\n        swcurve::affine::{Curve as SWCurve, Point as SWPoint}, tecurve::curvegroup,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation ax^2 + y^2 = 1 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in Cartesian coordinates\n        pub gen: Point,\n    }\n    // Point in Cartesian coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        // #[deprecated(\"It's recommmended to use the external noir-edwards library (https://github.com/noir-lang/noir-edwards)\")]\n        pub fn new(x: Field, y: Field) -> Self {\n            Self { x, y }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            self.eq(Point::zero())\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Point {\n            let Self { x, y } = self;\n\n            curvegroup::Point::new(x, y, x * y, 1)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y } = self;\n            Point::new(0 - x, y)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            if self.is_zero() {\n                MPoint::zero()\n            } else {\n                let Self { x, y } = self;\n                let x0 = (1 + y) / (1 - y);\n                let y0 = (1 + y) / (x * (1 - y));\n\n                MPoint::new(x0, y0)\n            }\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1 } = self;\n            let Self { x: x2, y: y2 } = p;\n\n            (x1 == x2) & (y1 == y2)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Curve {\n            let Curve { a, d, gen } = self;\n\n            curvegroup::Curve { a, d, gen: gen.into_group() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y } = p;\n            self.a * x * x + y * y == 1 + self.d * x * x * y * y\n        }\n\n        // Point addition, implemented in terms of mixed addition for reasons of efficiency\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            self.mixed_add(p1, p2.into_group()).into_affine()\n        }\n\n        // Mixed point addition, i.e. first argument in affine, second in CurveGroup coordinates.\n        pub fn mixed_add(self, p1: Point, p2: curvegroup::Point) -> curvegroup::Point {\n            let Point { x: x1, y: y1 } = p1;\n            let curvegroup::Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * x1 * y1 * t2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = z2 - c;\n            let g = z2 + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            curvegroup::Point::new(x, y, t, z)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            self.into_group().bit_mul(bits, p.into_group()).into_affine()\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            self.into_group().mul(n, p.into_group()).into_affine()\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            let j = 2 * (self.a + self.d) / (self.a - self.d);\n            let k = 4 / (self.a - self.d);\n            let gen_montcurve = self.gen.into_montcurve();\n\n            MCurve::new(j, k, gen_montcurve)\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent Short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent Short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational map)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\npub mod curvegroup {\n    // CurveGroup coordinate representation of Twisted Edwards curves\n    // Points are represented by four-dimensional projective coordinates, viz. extended Twisted Edwards coordinates.\n    // See section 3 of <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::curvegroup::{Curve as MCurve, Point as MPoint},\n        swcurve::curvegroup::{Curve as SWCurve, Point as SWPoint}, tecurve::affine,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation a(x^2 + y^2)z^2 = z^4 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in projective coordinates\n        pub gen: Point,\n    }\n    // Point in extended twisted Edwards coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n        pub t: Field,\n        pub z: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        pub fn new(x: Field, y: Field, t: Field, z: Field) -> Self {\n            Self { x, y, t, z }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            let Self { x, y, t, z } = self;\n            (x == 0) & (y == z) & (y != 0) & (t == 0)\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Point {\n            let Self { x, y, t: _t, z } = self;\n\n            affine::Point::new(x / z, y / z)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1, 0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y, t, z } = self;\n\n            Point::new(0 - x, y, 0 - t, z)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            self.into_affine().into_montcurve().into_group()\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1, t: _t1, z: z1 } = self;\n            let Self { x: x2, y: y2, t: _t2, z: z2 } = p;\n\n            (x1 * z2 == x2 * z1) & (y1 * z2 == y2 * z1)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Curve {\n            let Curve { a, d, gen } = self;\n\n            affine::Curve { a, d, gen: gen.into_affine() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y, t, z } = p;\n\n            (z != 0)\n                & (z * t == x * y)\n                & (z * z * (self.a * x * x + y * y) == z * z * z * z + self.d * x * x * y * y)\n        }\n\n        // Point addition\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            let Point { x: x1, y: y1, t: t1, z: z1 } = p1;\n            let Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * t1 * t2;\n            let d = z1 * z2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = d - c;\n            let g = d + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            Point::new(x, y, t, z)\n        }\n\n        // Point doubling, cf. section 3.3\n        pub fn double(self, p: Point) -> Point {\n            let Point { x, y, t: _t, z } = p;\n\n            let a = x * x;\n            let b = y * y;\n            let c = 2 * z * z;\n            let d = self.a * a;\n            let e = (x + y) * (x + y) - a - b;\n            let g = d + b;\n            let f = g - c;\n            let h = d - b;\n\n            let x0 = e * f;\n            let y0 = g * h;\n            let t0 = e * h;\n            let z0 = f * g;\n\n            Point::new(x0, y0, t0, z0)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(\n                    self.add(out, out),\n                    if (bits[N - i - 1] == 0) {\n                        Point::zero()\n                    } else {\n                        p\n                    },\n                );\n            }\n\n            out\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            // TODO: temporary workaround until issue 1354 is solved\n            let mut n_as_bits: [u1; 254] = [0; 254];\n            let tmp: [u1; 254] = n.to_le_bits();\n            for i in 0..254 {\n                n_as_bits[i] = tmp[i];\n            }\n\n            self.bit_mul(n_as_bits, p)\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            self.into_affine().into_montcurve().into_group()\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational maps)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\n","path":"/home/drone/nargo/github.com/noir-lang/ec/v0.1.2/src/tecurve.nr"},"72":{"source":"use dep::poseidon::poseidon2::Poseidon2;\r\n\r\nglobal MAX_DEPTH: u32 = 32;\r\n\r\npub struct Leaf {\r\n    pub key: u64,\r\n    pub next_idx: u32,\r\n    pub next_key: u64,\r\n    pub value: Field\r\n}\r\n\r\npub struct Proof {\r\n    pub leaf_idx: u32,\r\n    pub leaf: Leaf,\r\n    pub root: Field,\r\n    pub siblings: [Field; MAX_DEPTH]\r\n}\r\n\r\npub struct InsertionResult {\r\n    pub og_leaf_idx: u32,\r\n    pub og_leaf_key: u64,\r\n    pub og_leaf_next_idx: u32,\r\n    pub og_leaf_next_key: u64,\r\n    pub og_leaf_value: Field,\r\n    pub new_leaf_idx: u32,\r\n    pub new_leaf_key: u64,\r\n    pub new_leaf_value: Field,\r\n    pub root_before: Field,\r\n    pub root_after: Field,\r\n    pub siblings_before: [Field; MAX_DEPTH],\r\n    pub siblings_after_og: [Field; MAX_DEPTH],\r\n    pub siblings_after_new: [Field; MAX_DEPTH]\r\n}\r\n\r\npub fn empty_root() -> Field {\r\n    let zero_leaf = Leaf { key: 0, next_idx: 0, next_key: 0, value: 0 };\r\n    Poseidon2::hash([0, 0, 0, 0], 4)\r\n}\r\n\r\nfn hash_leaf(leaf: Leaf) -> Field {\r\n    Poseidon2::hash([\r\n        leaf.key as Field,\r\n        leaf.next_idx as Field,\r\n        leaf.next_key as Field,\r\n        leaf.value\r\n    ], 4)\r\n}\r\n\r\nfn hash_children(left: Field, right: Field) -> Field {\r\n    Poseidon2::hash([left, right], 2)\r\n}\r\n\r\npub fn compute_root(leaves: [Leaf; MAX_DEPTH], num_leaves: u32) -> Field {\r\n    let mut hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let empty = empty_root();\r\n    \r\n    // Hash all leaves\r\n    for i in 0..MAX_DEPTH {\r\n        if i < num_leaves {\r\n            hashes[i] = hash_leaf(leaves[i]);\r\n        } else {\r\n            hashes[i] = empty;\r\n        }\r\n    }\r\n    \r\n    // Build tree bottom-up with fixed loop bounds\r\n    let mut current_hashes = hashes;\r\n    \r\n    // Level 0: 32 -> 16\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..16 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 1: 16 -> 8\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..8 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 2: 8 -> 4\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..4 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 3: 4 -> 2\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..2 {\r\n        next_hashes[i] = hash_children(current_hashes[i * 2], current_hashes[i * 2 + 1]);\r\n    }\r\n    current_hashes = next_hashes;\r\n    \r\n    // Level 4: 2 -> 1\r\n    let mut next_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    next_hashes[0] = hash_children(current_hashes[0], current_hashes[1]);\r\n    \r\n    next_hashes[0]\r\n}\r\n\r\npub fn generate_proof(leaves: [Leaf; MAX_DEPTH], num_leaves: u32, leaf_idx: u32) -> Proof {\r\n    let leaf = leaves[leaf_idx];\r\n    let root = compute_root(leaves, num_leaves);\r\n    let mut siblings: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let mut hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    let empty = empty_root();\r\n    \r\n    for i in 0..MAX_DEPTH {\r\n        if i < num_leaves {\r\n            hashes[i] = hash_leaf(leaves[i]);\r\n        } else {\r\n            hashes[i] = empty;\r\n        }\r\n    }\r\n    \r\n    let mut idx = leaf_idx;\r\n    \r\n    // Level 0: 32 -> 16\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[0] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..16 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 1: 16 -> 8\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[1] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..8 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 2: 8 -> 4\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[2] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..4 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 3: 4 -> 2\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[3] = hashes[sibling_idx];\r\n    let mut new_hashes: [Field; MAX_DEPTH] = [0; MAX_DEPTH];\r\n    for i in 0..2 {\r\n        new_hashes[i] = hash_children(hashes[i * 2], hashes[i * 2 + 1]);\r\n    }\r\n    hashes = new_hashes;\r\n    idx = idx / 2;\r\n    \r\n    // Level 4: 2 -> 1\r\n    let sibling_idx = if idx % 2 == 0 { idx + 1 } else { idx - 1 };\r\n    siblings[4] = hashes[sibling_idx];\r\n    \r\n    Proof { leaf_idx: leaf_idx, leaf: leaf, root: root, siblings: siblings }\r\n}\r\n\r\npub fn verify_proof(proof: Proof) -> bool {\r\n    let mut current_hash = hash_leaf(proof.leaf);\r\n    let mut idx = proof.leaf_idx;\r\n    \r\n    for i in 0..5 {\r\n        if idx % 2 == 0 {\r\n            current_hash = hash_children(current_hash, proof.siblings[i]);\r\n        } else {\r\n            current_hash = hash_children(proof.siblings[i], current_hash);\r\n        }\r\n        idx = idx / 2;\r\n    }\r\n    \r\n    current_hash == proof.root\r\n}\r\n\r\npub fn verify_exclusion_proof(excluded_key: u64, proof: Proof) -> bool {\r\n    let is_after_leaf = excluded_key > proof.leaf.key;\r\n    let is_before_next = (proof.leaf.next_idx == 0) | (excluded_key < proof.leaf.next_key);\r\n    is_after_leaf & is_before_next\r\n}\r\n\r\npub fn verify_insertion_proof(insertion_result: InsertionResult) -> bool {\r\n    let og_leaf = Leaf {\r\n        key: insertion_result.og_leaf_key,\r\n        next_idx: insertion_result.og_leaf_next_idx,\r\n        next_key: insertion_result.og_leaf_next_key,\r\n        value: insertion_result.og_leaf_value\r\n    };\r\n    \r\n    let og_proof = Proof {\r\n        leaf_idx: insertion_result.og_leaf_idx,\r\n        leaf: og_leaf,\r\n        root: insertion_result.root_before,\r\n        siblings: insertion_result.siblings_before\r\n    };\r\n    \r\n    let new_leaf = Leaf {\r\n        key: insertion_result.new_leaf_key,\r\n        next_idx: 0,\r\n        next_key: 0,\r\n        value: insertion_result.new_leaf_value\r\n    };\r\n    \r\n    let new_proof = Proof {\r\n        leaf_idx: insertion_result.new_leaf_idx,\r\n        leaf: new_leaf,\r\n        root: insertion_result.root_after,\r\n        siblings: insertion_result.siblings_after_new\r\n    };\r\n    \r\n    verify_proof(og_proof) & verify_proof(new_proof)\r\n}\r\n\r\npub fn insert_item(\r\n    leaves: [Leaf; MAX_DEPTH],\r\n    num_leaves: u32,\r\n    new_key: u64,\r\n    new_value: Field\r\n) -> (InsertionResult, [Leaf; MAX_DEPTH], u32) {\r\n    // Find insertion position to maintain sorted order\r\n    let mut insert_idx = num_leaves; // Default to end\r\n    let mut prev_idx = 0;\r\n    \r\n    // Find the correct position for insertion (without break)\r\n    for i in 0..MAX_DEPTH {\r\n        let i_u32 = i as u32;\r\n        if i_u32 < num_leaves {\r\n            let is_greater = leaves[i].key > new_key;\r\n            let is_less_than_insert = i_u32 < insert_idx;\r\n            if is_greater & is_less_than_insert {\r\n                insert_idx = i_u32;\r\n            }\r\n            if i_u32 < insert_idx {\r\n                prev_idx = i_u32;\r\n            }\r\n        }\r\n    }\r\n    \r\n    let mut new_leaves = leaves;\r\n    let new_leaf_idx = num_leaves;\r\n    \r\n    // Create new leaf\r\n    let new_leaf = Leaf {\r\n        key: new_key,\r\n        next_idx: 0,\r\n        next_key: 0,\r\n        value: new_value\r\n    };\r\n    \r\n    // Insert at the end for now (simplified approach)\r\n    new_leaves[new_leaf_idx] = new_leaf;\r\n    \r\n    // Update previous leaf's next pointers if needed\r\n    if prev_idx < num_leaves {\r\n        new_leaves[prev_idx] = Leaf {\r\n            key: leaves[prev_idx].key,\r\n            next_idx: new_leaf_idx,\r\n            next_key: new_key,\r\n            value: leaves[prev_idx].value\r\n        };\r\n    }\r\n    \r\n    let new_count = num_leaves + 1;\r\n    \r\n    // Generate proofs\r\n    let og_proof = generate_proof(leaves, num_leaves, prev_idx);\r\n    let new_proof = generate_proof(new_leaves, new_count, new_leaf_idx);\r\n    let updated_prev_proof = generate_proof(new_leaves, new_count, prev_idx);\r\n    \r\n    let result = InsertionResult {\r\n        og_leaf_idx: og_proof.leaf_idx,\r\n        og_leaf_key: og_proof.leaf.key,\r\n        og_leaf_next_idx: og_proof.leaf.next_idx,\r\n        og_leaf_next_key: og_proof.leaf.next_key,\r\n        og_leaf_value: og_proof.leaf.value,\r\n        new_leaf_idx: new_proof.leaf_idx,\r\n        new_leaf_key: new_proof.leaf.key,\r\n        new_leaf_value: new_proof.leaf.value,\r\n        root_before: og_proof.root,\r\n        root_after: new_proof.root,\r\n        siblings_before: og_proof.siblings,\r\n        siblings_after_og: updated_prev_proof.siblings,\r\n        siblings_after_new: new_proof.siblings\r\n    };\r\n    \r\n    (result, new_leaves, new_count)\r\n}","path":"/home/drone/projects/ethrome25/circuits/lib/indexed-merkle-tree/src/indexed_merkle_tree.nr"},"82":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/drone/projects/ethrome25/circuits/lib/poseidon/src/poseidon2.nr"},"84":{"source":"use dep::std;\r\nuse dep::poseidon::poseidon2::Poseidon2;\r\n\r\n/// Poseidon CTR Mode Encryption Library\r\n/// \r\n/// This library provides Poseidon-based encryption in CTR mode for field elements.\r\n/// It includes functions for encrypting individual fields and batch encryption.\r\n\r\n/// Generate a keystream using Poseidon with shared_key and nonce\r\npub fn poseidon_keystream(shared_key: Field, nonce: u32) -> Field {\r\n    // === POSEIDON KEYSTREAM GENERATION ===\r\n    // Generate keystream using Poseidon with shared_key and nonce\r\n    \r\n    // Use the public hash function with shared_key and nonce\r\n    Poseidon2::hash([shared_key, nonce as Field], 2)\r\n}\r\n\r\n/// Encrypt a single field using Poseidon CTR mode\r\npub fn poseidon_ctr_encrypt(plaintext: Field, shared_key: Field, counter: u32) -> Field {\r\n    // === POSEIDON CTR MODE ENCRYPTION ===\r\n    // Use Poseidon to generate keystream for CTR mode encryption\r\n    \r\n    // Generate keystream using Poseidon with shared_key and counter\r\n    let keystream = poseidon_keystream(shared_key, counter);\r\n    \r\n    // Encrypt by adding keystream to plaintext (field arithmetic equivalent of XOR)\r\n    let ciphertext = plaintext + keystream;\r\n    \r\n    ciphertext\r\n}\r\n\r\n/// Decrypt a single field using Poseidon CTR mode\r\npub fn poseidon_ctr_decrypt(ciphertext: Field, shared_key: Field, counter: u32) -> Field {\r\n    // === POSEIDON CTR MODE DECRYPTION ===\r\n    // Decryption is the same as encryption in CTR mode\r\n    \r\n    // Generate the same keystream\r\n    let keystream = poseidon_keystream(shared_key, counter);\r\n    \r\n    // Decrypt by subtracting keystream from ciphertext\r\n    let plaintext = ciphertext - keystream;\r\n    \r\n    plaintext\r\n}\r\n\r\n/// Encrypt all four fields (amount, token_address, ref, encryption_key) in one function call\r\n/// This provides integrity checking - the ref value can be verified when absorbing the note\r\npub fn poseidon_encrypt_all_fields(\r\n    amount: Field, \r\n    token_address: Field,\r\n    ref: Field,\r\n    encryption_key: Field\r\n) -> (Field, Field, Field, Field) {\r\n    // === POSEIDON ENCRYPT ALL FIELDS ===\r\n    // Encrypt all four fields with different counters in one function call\r\n    // The ref value provides integrity checking when absorbing the note\r\n    \r\n    let encrypted_amount = poseidon_ctr_encrypt(amount, encryption_key, 0);\r\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, encryption_key, 1);\r\n    let encrypted_ref = poseidon_ctr_encrypt(ref, encryption_key, 2);\r\n    let encrypted_key = poseidon_ctr_encrypt(encryption_key, encryption_key, 3);\r\n    \r\n    (encrypted_amount, encrypted_token_address, encrypted_ref, encrypted_key)\r\n}\r\n\r\n/// Encrypt all four fields and return as array for cleaner API\r\npub fn poseidon_encrypt_all_fields_array(\r\n    amount: Field, \r\n    token_address: Field,\r\n    ref: Field,\r\n    encryption_key: Field\r\n) -> [Field; 3] {\r\n    // === POSEIDON ENCRYPT ALL FIELDS ARRAY ===\r\n    // Encrypt all four fields and return the first 3 as an array\r\n    // The ref value provides integrity checking when absorbing the note\r\n    \r\n    let encrypted_amount = poseidon_ctr_encrypt(amount, encryption_key, 0);\r\n    let encrypted_token_address = poseidon_ctr_encrypt(token_address, encryption_key, 1);\r\n    let encrypted_ref = poseidon_ctr_encrypt(ref, encryption_key, 2);\r\n    \r\n    [encrypted_amount, encrypted_token_address, encrypted_ref]\r\n}\r\n\r\n// ===== BASIC FUNCTIONALITY TESTS =====\r\n\r\n#[test]\r\nfn test_basic_encryption_decryption() {\r\n    // Test basic encryption and decryption round-trip\r\n    let plaintext = 12345 as Field;\r\n    let shared_key = Poseidon2::hash([42 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_zero_plaintext() {\r\n    // Test encryption of zero value\r\n    let plaintext = 0 as Field;\r\n    let shared_key = Poseidon2::hash([123 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_large_plaintext() {\r\n    // Test encryption of large field value (using a large but valid field value)\r\n    let plaintext = 21888242871839275222246405745257275088548364400416034343698204186575808495616 as Field; // p-1\r\n    let shared_key = Poseidon2::hash([456 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n// ===== COUNTER/KEYSTREAM TESTS =====\r\n\r\n#[test]\r\nfn test_different_counters_produce_different_ciphertexts() {\r\n    // Test that different counters produce different ciphertexts\r\n    let plaintext = 1000 as Field;\r\n    let shared_key = Poseidon2::hash([789 as Field], 1);\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(plaintext, shared_key, 0);\r\n    let ciphertext2 = poseidon_ctr_encrypt(plaintext, shared_key, 1);\r\n    let ciphertext3 = poseidon_ctr_encrypt(plaintext, shared_key, 2);\r\n    \r\n    // All ciphertexts should be different\r\n    assert(ciphertext1 != ciphertext2);\r\n    assert(ciphertext2 != ciphertext3);\r\n    assert(ciphertext1 != ciphertext3);\r\n    \r\n    // But all should decrypt to the same plaintext\r\n    assert(poseidon_ctr_decrypt(ciphertext1, shared_key, 0) == plaintext);\r\n    assert(poseidon_ctr_decrypt(ciphertext2, shared_key, 1) == plaintext);\r\n    assert(poseidon_ctr_decrypt(ciphertext3, shared_key, 2) == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_consistency() {\r\n    // Test that same inputs produce same keystream\r\n    let shared_key = Poseidon2::hash([999 as Field], 1);\r\n    let nonce = 5 as u32;\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, nonce);\r\n    let keystream2 = poseidon_keystream(shared_key, nonce);\r\n    \r\n    assert(keystream1 == keystream2);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_different_nonces() {\r\n    // Test that different nonces produce different keystreams\r\n    let shared_key = Poseidon2::hash([111 as Field], 1);\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, 0);\r\n    let keystream2 = poseidon_keystream(shared_key, 1);\r\n    let keystream3 = poseidon_keystream(shared_key, 2);\r\n    \r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream1 != keystream3);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_different_keys() {\r\n    // Test that different keys produce different keystreams\r\n    let nonce = 0 as u32;\r\n    \r\n    let keystream1 = poseidon_keystream(Poseidon2::hash([1 as Field], 1), nonce);\r\n    let keystream2 = poseidon_keystream(Poseidon2::hash([2 as Field], 1), nonce);\r\n    let keystream3 = poseidon_keystream(Poseidon2::hash([3 as Field], 1), nonce);\r\n    \r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream1 != keystream3);\r\n}\r\n\r\n// ===== BATCH ENCRYPTION TESTS =====\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_basic() {\r\n    // Test batch encryption of all four fields\r\n    let amount = 1000 as Field;\r\n    let token_address = 12345 as Field;\r\n    let ref = 67890 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    // Verify each field can be decrypted individually\r\n    let dec_amount = poseidon_ctr_decrypt(enc_amount, encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(enc_token, encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let dec_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n    assert(dec_key == encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_zero_values() {\r\n    // Test batch encryption with zero values\r\n    let amount = 0 as Field;\r\n    let token_address = 0 as Field;\r\n    let ref = 0 as Field;\r\n    let encryption_key = Poseidon2::hash([0 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    let dec_amount = poseidon_ctr_decrypt(enc_amount, encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(enc_token, encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let dec_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n    assert(dec_key == encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_different_keys() {\r\n    // Test that different encryption keys produce different results\r\n    let amount = 1000 as Field;\r\n    let token_address = 2000 as Field;\r\n    let ref = 3000 as Field;\r\n    \r\n    let key1 = Poseidon2::hash([111 as Field], 1);\r\n    let key2 = Poseidon2::hash([222 as Field], 1);\r\n    \r\n    let (enc1_amount, enc1_token, enc1_ref, enc1_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, key1\r\n    );\r\n    \r\n    let (enc2_amount, enc2_token, enc2_ref, enc2_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, key2\r\n    );\r\n    \r\n    // Different keys should produce different ciphertexts\r\n    assert(enc1_amount != enc2_amount);\r\n    assert(enc1_token != enc2_token);\r\n    assert(enc1_ref != enc2_ref);\r\n    assert(enc1_key != enc2_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_integrity_check() {\r\n    // Test that the ref and key values provide integrity checking\r\n    let amount = 5000 as Field;\r\n    let token_address = 6000 as Field;\r\n    let ref = 7000 as Field;\r\n    let encryption_key = Poseidon2::hash([777 as Field], 1);\r\n    \r\n    let (enc_amount, enc_token, enc_ref, enc_key) = poseidon_encrypt_all_fields(\r\n        amount, token_address, ref, encryption_key\r\n    );\r\n    \r\n    // Decrypt the ref and key values - they should match the original values\r\n    let decrypted_ref = poseidon_ctr_decrypt(enc_ref, encryption_key, 2);\r\n    let decrypted_key = poseidon_ctr_decrypt(enc_key, encryption_key, 3);\r\n    assert(decrypted_ref == ref);\r\n    assert(decrypted_key == encryption_key);\r\n    \r\n    // This provides integrity: if someone tries to use a different key to decrypt,\r\n    // the values won't match, indicating tampering\r\n    let wrong_key = Poseidon2::hash([888 as Field], 1);\r\n    let wrong_decrypted_ref = poseidon_ctr_decrypt(enc_ref, wrong_key, 2);\r\n    let wrong_decrypted_key = poseidon_ctr_decrypt(enc_key, wrong_key, 3);\r\n    assert(wrong_decrypted_ref != ref);\r\n    assert(wrong_decrypted_key != encryption_key);\r\n}\r\n\r\n#[test]\r\nfn test_encrypt_all_fields_array() {\r\n    // Test the array version of encrypt all fields\r\n    let amount = 1000 as Field;\r\n    let token_address = 2000 as Field;\r\n    let ref = 3000 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    let encrypted_array = poseidon_encrypt_all_fields_array(amount, token_address, ref, encryption_key);\r\n    \r\n    // Verify array has 3 elements\r\n    assert(encrypted_array.len() == 3);\r\n    \r\n    // Verify each element can be decrypted\r\n    let dec_amount = poseidon_ctr_decrypt(encrypted_array[0], encryption_key, 0);\r\n    let dec_token = poseidon_ctr_decrypt(encrypted_array[1], encryption_key, 1);\r\n    let dec_ref = poseidon_ctr_decrypt(encrypted_array[2], encryption_key, 2);\r\n    \r\n    assert(dec_amount == amount);\r\n    assert(dec_token == token_address);\r\n    assert(dec_ref == ref);\r\n}\r\n\r\n// ===== SECURITY TESTS =====\r\n\r\n#[test]\r\nfn test_wrong_key_fails_decryption() {\r\n    // Test that decryption with wrong key fails\r\n    let plaintext = 5000 as Field;\r\n    let correct_key = Poseidon2::hash([111 as Field], 1);\r\n    let wrong_key = Poseidon2::hash([222 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, correct_key, counter);\r\n    let wrong_decrypted = poseidon_ctr_decrypt(ciphertext, wrong_key, counter);\r\n    \r\n    // Should not recover original plaintext\r\n    assert(wrong_decrypted != plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_wrong_counter_fails_decryption() {\r\n    // Test that decryption with wrong counter fails\r\n    let plaintext = 7777 as Field;\r\n    let shared_key = Poseidon2::hash([333 as Field], 1);\r\n    let correct_counter = 2 as u32;\r\n    let wrong_counter = 3 as u32;\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, correct_counter);\r\n    let wrong_decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, wrong_counter);\r\n    \r\n    // Should not recover original plaintext\r\n    assert(wrong_decrypted != plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_encryption_deterministic() {\r\n    // Test that same inputs always produce same ciphertext\r\n    let plaintext = 8888 as Field;\r\n    let shared_key = Poseidon2::hash([444 as Field], 1);\r\n    let counter = 1 as u32;\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    let ciphertext2 = poseidon_ctr_encrypt(plaintext, shared_key, counter);\r\n    \r\n    // Same inputs should produce same ciphertext\r\n    assert(ciphertext1 == ciphertext2);\r\n}\r\n\r\n#[test]\r\nfn test_different_plaintexts_different_ciphertexts() {\r\n    // Test that different plaintexts produce different ciphertexts\r\n    let shared_key = Poseidon2::hash([555 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    let ciphertext1 = poseidon_ctr_encrypt(1000 as Field, shared_key, counter);\r\n    let ciphertext2 = poseidon_ctr_encrypt(2000 as Field, shared_key, counter);\r\n    let ciphertext3 = poseidon_ctr_encrypt(3000 as Field, shared_key, counter);\r\n    \r\n    // Different plaintexts should produce different ciphertexts\r\n    assert(ciphertext1 != ciphertext2);\r\n    assert(ciphertext2 != ciphertext3);\r\n    assert(ciphertext1 != ciphertext3);\r\n}\r\n\r\n// ===== EDGE CASE TESTS =====\r\n\r\n#[test]\r\nfn test_max_counter_value() {\r\n    // Test with maximum counter value\r\n    let plaintext = 1234 as Field;\r\n    let shared_key = Poseidon2::hash([666 as Field], 1);\r\n    let max_counter = 4294967295 as u32; // u32::MAX\r\n    \r\n    let ciphertext = poseidon_ctr_encrypt(plaintext, shared_key, max_counter);\r\n    let decrypted = poseidon_ctr_decrypt(ciphertext, shared_key, max_counter);\r\n    \r\n    assert(decrypted == plaintext);\r\n}\r\n\r\n#[test]\r\nfn test_encryption_preserves_field_arithmetic() {\r\n    // Test that encryption preserves field arithmetic properties\r\n    let a = 1000 as Field;\r\n    let b = 2000 as Field;\r\n    let shared_key = Poseidon2::hash([777 as Field], 1);\r\n    let counter = 0 as u32;\r\n    \r\n    // Encrypt individual values\r\n    let enc_a = poseidon_ctr_encrypt(a, shared_key, counter);\r\n    let enc_b = poseidon_ctr_encrypt(b, shared_key, counter);\r\n    \r\n    // Decrypt and verify\r\n    let dec_a = poseidon_ctr_decrypt(enc_a, shared_key, counter);\r\n    let dec_b = poseidon_ctr_decrypt(enc_b, shared_key, counter);\r\n    \r\n    assert(dec_a == a);\r\n    assert(dec_b == b);\r\n}\r\n\r\n#[test]\r\nfn test_keystream_uniformity() {\r\n    // Test that keystreams appear uniformly distributed\r\n    let shared_key = Poseidon2::hash([888 as Field], 1);\r\n    \r\n    let keystream1 = poseidon_keystream(shared_key, 0);\r\n    let keystream2 = poseidon_keystream(shared_key, 1);\r\n    let keystream3 = poseidon_keystream(shared_key, 2);\r\n    let keystream4 = poseidon_keystream(shared_key, 3);\r\n    let keystream5 = poseidon_keystream(shared_key, 4);\r\n    \r\n    // All keystreams should be different (very high probability)\r\n    assert(keystream1 != keystream2);\r\n    assert(keystream2 != keystream3);\r\n    assert(keystream3 != keystream4);\r\n    assert(keystream4 != keystream5);\r\n    assert(keystream1 != keystream3);\r\n    assert(keystream1 != keystream4);\r\n    assert(keystream1 != keystream5);\r\n    assert(keystream2 != keystream4);\r\n    assert(keystream2 != keystream5);\r\n    assert(keystream3 != keystream5);\r\n}\r\n\r\n// ===== TEST FOR TYPESCRIPT COMPARISON =====\r\n\r\n/// Get test values for TypeScript comparison\r\npub fn get_poseidon_ctr_test_values() -> (Field, Field, Field, Field, Field, Field, Field, Field) {\r\n    // Test values to compare with TypeScript implementation\r\n    let amount = 1000 as Field;\r\n    let token_address = 12345 as Field;\r\n    let ref = 67890 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    // Encrypt all fields\r\n    let (encrypted_amount, encrypted_token_address, encrypted_ref, encrypted_key) = \r\n        poseidon_encrypt_all_fields(amount, token_address, ref, encryption_key);\r\n    \r\n    // Return all values for external testing\r\n    (amount, token_address, ref, encryption_key, encrypted_amount, encrypted_token_address, encrypted_ref, encrypted_key)\r\n}\r\n\r\n#[test]\r\nfn test_poseidon_ctr_encryption_values() {\r\n    // Test values to compare with TypeScript implementation\r\n    let amount = 1000 as Field;\r\n    let token_address = 12345 as Field;\r\n    let ref = 67890 as Field;\r\n    let encryption_key = Poseidon2::hash([999 as Field], 1);\r\n    \r\n    // Encrypt all fields\r\n    let (encrypted_amount, encrypted_token_address, encrypted_ref, encrypted_key) = \r\n        poseidon_encrypt_all_fields(amount, token_address, ref, encryption_key);\r\n    \r\n    // Decrypt all fields\r\n    let decrypted_amount = poseidon_ctr_decrypt(encrypted_amount, encryption_key, 0);\r\n    let decrypted_token_address = poseidon_ctr_decrypt(encrypted_token_address, encryption_key, 1);\r\n    let decrypted_ref = poseidon_ctr_decrypt(encrypted_ref, encryption_key, 2);\r\n    let decrypted_key = poseidon_ctr_decrypt(encrypted_key, encryption_key, 3);\r\n    \r\n    // Verify round-trip encryption/decryption\r\n    assert(decrypted_amount == amount);\r\n    assert(decrypted_token_address == token_address);\r\n    assert(decrypted_ref == ref);\r\n    assert(decrypted_key == encryption_key);\r\n    \r\n \r\n    println(\"Encrypted amount: 0x{:x}\");\r\n    println(encrypted_amount);\r\n    println(\"Encrypted token address: 0x{:x}\");\r\n    println(encrypted_token_address);\r\n    println(\"Encrypted ref: 0x{:x}\");\r\n    println(encrypted_ref);\r\n    println(\"Encrypted key: 0x{:x}\");\r\n    println(encrypted_key);\r\n    println(\"Decrypted amount: 0x{:x}\");\r\n    println(decrypted_amount);\r\n    println(\"Decrypted token address: 0x{:x}\");\r\n    println(decrypted_token_address);\r\n    println(\"Decrypted ref: 0x{:x}\");\r\n    println(decrypted_ref);\r\n    println(\"Decrypted key: 0x{:x}\");\r\n    println(decrypted_key);\r\n}\r\n","path":"/home/drone/projects/ethrome25/circuits/lib/poseidon-ctr-encryption/src/lib.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}